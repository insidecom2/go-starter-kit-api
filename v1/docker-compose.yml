services:
  postgres_db:
    container_name: "postgres_db"
    image: postgres:17.1
    ports:
      - "54322:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    volumes:
      - pgdatabase:/var/lib/postgres/data/
    platform: linux/amd64
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - go_api_network

  api-app:
    container_name: "go-app-api"
    build:
      context: .
      dockerfile: DockerfileDev
    stdin_open: true
    tty: true
    ports:
      - 8000:8000
    volumes:
      - .:/app/api/go-app-api
    depends_on:
      postgres_db:
        condition: service_healthy
        restart: true
    networks:
      - go_api_network

  migrate_db:
    container_name: "migrate_db"
    build:
      context: .
      dockerfile: DockerfileDev
    depends_on:
      postgres_db:
        condition: service_healthy
        restart: true
    volumes:
      - .:/app/api/go-app-api
    entrypoint:
      [
        "goose",
        "-dir",
        "src/migrations/postgres",
        "postgres",
        "postgres://postgres:postgres@postgres_db:5432/postgres",
        "up",
      ]
    networks:
      - go_api_network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    networks:
      - go_api_network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - go_api_network

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: "always"
    ports:
      - "9009:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
    depends_on:
      - "kafka"
    networks:
      - go_api_network

volumes:
  pgdatabase:
    driver: local

networks:
  go_api_network:
    driver: bridge
    external: true
